@page "/"
@page "/index"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Inputs
@inject NavigationManager NavigationManager
<div class="position-relative">
    <div class="position-absolute top-0 end-0">
        <button class="btn btn-dark" @onclick="(()=>{showSide=!showSide;})"> Click</button>
    </div>
    @if (showSide)
    {
        <div class="bottom-0 end-0">Title</div>
    }
    <SfAccumulationChart EnableBorderOnMouseMove="false" Title="Browser Market Share" EnableAnimation="true" Theme="@Theme">
        <AccumulationChartTooltipSettings Header="" Format="<b>${point.x}</b><br>Browser Share: <b>${point.y}%</b>" Enable="true"></AccumulationChartTooltipSettings>
        <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
        <AccumulationChartSeriesCollection>
            <AccumulationChartSeries DataSource="@PieChartPoints" XName="Browser" YName="Users" Radius="@Radius" Name="Browser" StartAngle="@StartAngle"
                                     InnerRadius="0%" ExplodeIndex="0" Explode="true" ExplodeOffset="@ExplodeRadius">
                <AccumulationDataLabelSettings Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Outside">
                    <AccumulationChartDataLabelFont Size=@Size FontWeight="600"></AccumulationChartDataLabelFont>
                    <AccumulationChartConnector Length=@ConnectorLength Type="ConnectorType.Curve"></AccumulationChartConnector>
                </AccumulationDataLabelSettings>
            </AccumulationChartSeries>
        </AccumulationChartSeriesCollection>
    </SfAccumulationChart>
</div>


@code {
    bool showSide;
    public Theme Theme { get; set; }
    public int ExplodeIndex { get; set; } = 1;
    public string ExplodeRadius = "10%";
    public string Radius { get; set; } = "60%";
    public string ConnectorLength { get; set; } = "20px";
    public int StartAngle = 30;
    public string Size { get; set; } = "12px";


    //
    //  "pure" IEnumerable will crash the system
    //
    public IEnumerable<PieData> PieChartPoints
    {
        get
        {
            yield return new PieData("Chrome", 59.28, "Chrome: 59.28%");
            yield return new PieData("UC",  4.37, "UC 4.37%");
            yield return new PieData("Internet Explorer", 6.12, "Internet Explorer: 6.12%");
            yield return new PieData("Sogou Explorer", 1.37, "Sogou Explorer: 1.37%");
            yield return new PieData("QQ", 3.96, "QQ: 3.96%");
            yield return new PieData("Safari", 4.73, "Safari: 4.73%");
            yield return new PieData("Opera", 3.12, "Opera: 3.12%");
            yield return new PieData("Edge", 7.48, "Edge: 7.48%");
            yield return new PieData("Others", 9.57, "Others: 9.57%");
        }
    }

    //
    //  IEnumerable without an underlying collection type will crash the system
    //

    // public IEnumerable<PieData> PieChartPoints
    // {
    //     get
    //     {
    //         return [new PieData("Chrome", 59.28, "Chrome: 59.28%"),
    //      new PieData("UC",  4.37, "UC 4.37%"),
    //      new PieData("Internet Explorer", 6.12, "Internet Explorer: 6.12%"),
    //      new PieData("Sogou Explorer", 1.37, "Sogou Explorer: 1.37%"),
    //      new PieData("QQ", 3.96, "QQ: 3.96%"),
    //      new PieData("Safari", 4.73, "Safari: 4.73%"),
    //      new PieData("Opera", 3.12, "Opera: 3.12%"),
    //      new PieData("Edge", 7.48, "Edge: 7.48%"),
    //      new PieData("Others", 9.57, "Others: 9.57%")];
    //     }
    // }


    //
    //  IEnumerable with underlying list is OK
    //
    // public IEnumerable<PieData> PieChartPoints
    // {
    //     get
    //     {
    //         return new List<PieData>() { new PieData("Chrome", 59.28, "Chrome: 59.28%"),
    //      new PieData("UC",  4.37, "UC 4.37%"),
    //      new PieData("Internet Explorer", 6.12, "Internet Explorer: 6.12%"),
    //      new PieData("Sogou Explorer", 1.37, "Sogou Explorer: 1.37%"),
    //      new PieData("QQ", 3.96, "QQ: 3.96%"),
    //      new PieData("Safari", 4.73, "Safari: 4.73%"),
    //      new PieData("Opera", 3.12, "Opera: 3.12%"),
    //      new PieData("Edge", 7.48, "Edge: 7.48%"),
    //      new PieData("Others", 9.57, "Others: 9.57%")};
    //     }
    // }


    //
    //  Original code from the site
    //


    //     public List<PieData> PieChartPoints { get; set; } = new List<PieData>
    // {
    //         new PieData ("Chrome", 59.28, "Chrome: 59.28%"),
    //         new PieData ("UC Browser", 4.37, "UC Browser: 4.37%"),
    //         new PieData ("Internet Explorer", 6.12, "Internet Explorer: 6.12%"),
    //         new PieData ("Sogou Explorer", 1.37, "Sogou Explorer: 1.37%"),
    //         new PieData ("QQ", 3.96, "QQ: 3.96%"),
    //         new PieData ("Safari", 4.73, "Safari: 4.73%"),
    //         new PieData ("Opera", 3.12, "Opera: 3.12%"),
    //         new PieData ("Edge", 7.48, "Edge: 7.48%"),
    //         new PieData ("Others", 9.57, "Others: 9.57%"),
    //     };

    protected override void OnInitialized()
    {
        Theme = Theme.Bootstrap5;
        StartAngle = 70;
        Radius = "40%";
        // PieChartPoints.RemoveRange(1, 4);
        // PieChartPoints[4].Users = 25.39;
        // PieChartPoints[1].DataLabelMappingName = "Safari<br> 4.73%";
        // PieChartPoints[4].DataLabelMappingName = "Others: 25.39%";
        ConnectorLength = "10px";
        Size = "8px";
    }
    public class PieData
    {
        public PieData(string browser, double users, string dataLabelMappingName)
        {
            Browser = browser;
            Users = users;
            DataLabelMappingName = dataLabelMappingName;
        }
        public string Browser { get; set; }

        public double Users { get; set; }
        public string DataLabelMappingName { get; set; }
    }

    // public record PieData(string Browser, double Users, string DataLabelMappingName);

}